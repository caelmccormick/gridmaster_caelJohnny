package model

import org.scalatest.FunSpec
import org.scalatest.Matchers

import model._

class Menu_Test extends FunSpec with Matchers {

   describe("The GridMaster Simulation") {
    describe("has a menu") {

      //******* SHOW GAME AREA *******
      it("can show the game area, including the 20 x 20 board, player scores, and tiles in each player's hand") {

        val expectedResult = 
            "Board:\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "\n" +
            "Scores:\n" +
            "Orange = 0, Magenta = 0, Lime = 0, Aqua = 0\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 100, Magenta = 100, Lime = 100, Aqua = 100\n\n"

        Menu.showGameArea should be(expectedResult)
      }   

      //******* SHOW PLAYER ORDER *******
      it("can show the player order") {     
        val expectedResult = "Orange, Magenta, Lime, Aqua"
        Menu.showPlayerOrder should be(expectedResult)  
      }

      //******* ADVANCE ORDER *******
      it("can advance the player order") {     
        val expectedResult_0_advances = "Orange, Magenta, Lime, Aqua"
        val expectedResult_1_advances = "Magenta, Lime, Aqua, Orange"
        val expectedResult_2_advances = "Lime, Aqua, Orange, Magenta"        
        val expectedResult_4_advances = "Orange, Magenta, Lime, Aqua"

        Menu.showPlayerOrder should be(expectedResult_0_advances)  

        Menu.advancePlayerOrder
        Menu.showPlayerOrder should be(expectedResult_1_advances)  

        Menu.advancePlayerOrder 
        Menu.showPlayerOrder should be(expectedResult_2_advances)

        Menu.advancePlayerOrder   // 3 advances

        Menu.advancePlayerOrder
        Menu.showPlayerOrder should be(expectedResult_4_advances)
        Menu.showPlayerOrder should be(expectedResult_0_advances)
      }

      //******* INITIALIZE GAME *******
      it("can INITIALIZE to cause the game board to be cleared and player data reset") {

        // first, we put the game into an artificial, mid-simulation state

        val orange_1 = new Tile('O', 1)
        val magenta_10 = new Tile('M', 10)
        val lime_20 = new Tile('L', 20)
        val aqua_66 = new Tile('A', 66)
        val aqua_99 = new Tile('A', 99)

        Board.acceptTile(orange_1, 3, 5) // new feature
        Board.acceptTile(magenta_10, 1, 1)
        Board.acceptTile(lime_20, 2, 3)
        Board.acceptTile(aqua_66, 20, 1)
        Board.acceptTile(aqua_99, 20, 20)

        PlayerOrder.current.score += 1 // new feature
        PlayerOrder.current.score += 1
        PlayerOrder.current.score += 1

        PlayerOrder.current.tiles -= 1
        PlayerOrder.current.tiles -= 1

        val expectedResult1 =
          "Board:\n" +
            "M10[ ][*][*][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ]L20[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][*][*][ ]O1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][*][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "A66[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]A99\n" +
            "\n" +
            "Scores:\n" +
            "Orange = 3, Magenta = 0, Lime = 0, Aqua = 0\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 98, Magenta = 100, Lime = 100, Aqua = 100\n\n"

        Menu.showGameArea should be(expectedResult1)

        // now that we know the simulation is "un-initialized...
        Menu.initialize // new feature

        val expectedResult2 =
          "Board:\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "\n" +
            "Scores:\n" +
            "Orange = 0, Magenta = 0, Lime = 0, Aqua = 0\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 100, Magenta = 100, Lime = 100, Aqua = 100\n\n"

        Menu.showGameArea should be(expectedResult2)

      }

      //******* CHECK FOR WINNER *******
      it("can CHECK FOR WINNER to show whether a player has won the game") {

        Menu.checkForWinner should be("none")

        PlayerOrder.current.score += 100
        Menu.checkForWinner should be("Orange")
      }

      //******* DO MOVE *******
      it("can DO MOVE, causing the player at the front of the player order place their next tile on the board") {

        Menu.initialize
        Menu.doMove // new feature (***** first move *****)

        val expectedResult1 =
          "Board:\n" +
            "O1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "\n" +
            "Scores:\n" +
            "Magenta = 0, Lime = 0, Aqua = 0, Orange = 1\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Magenta = 100, Lime = 100, Aqua = 100, Orange = 99\n\n"

        Menu.showGameArea should be(expectedResult1)
        val expectedResult_PO_1 = "Magenta, Lime, Aqua, Orange"
        Menu.showPlayerOrder should be(expectedResult_PO_1)

        // Handle the first moves by the other 3 players
        // Note that initial moves are hard-coded to the four corners
        val expectedResult2 =
          "Board:\n" +
            "O1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]M1 \n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "L1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]A1 \n" +
            "\n" +
            "Scores:\n" +
            "Orange = 1, Magenta = 1, Lime = 1, Aqua = 1\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 99, Magenta = 99, Lime = 99, Aqua = 99\n\n"

        val expectedResult_PO_2 = "Orange, Magenta, Lime, Aqua"

        Menu.doMove // Magenta's move
        Menu.doMove // Lime's move
        Menu.doMove // Aqua's move

        Menu.showGameArea should be(expectedResult2)
        Menu.showPlayerOrder should be(expectedResult_PO_2)

      }

      it("can DO MOVE when moves play off an active tile") {
        Menu.initialize

        val expectedResult3 =
          "Board:\n" +
            " - [ ][ ]O2 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]M1 \n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][*][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "L1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]A1 \n" +
            "\n" +
            "Scores:\n" +
            "Magenta = 1, Lime = 1, Aqua = 1, Orange = 2\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Magenta = 99, Lime = 99, Aqua = 99, Orange = 98\n\n"

        val expectedResult_PO_3 = "Magenta, Lime, Aqua, Orange"

        Menu.doMove
        Menu.doMove
        Menu.doMove
        Menu.doMove
        Menu.doMove // new feature (***** move played off an active tile *****)

        Menu.showGameArea should be(expectedResult3)
        Menu.showPlayerOrder should be(expectedResult_PO_3)

        val expectedResult4 =
          "Board:\n" +
            " - [ ][ ] - [ ][ ]M2 [ ][ ][*][ ][ ][ ][ ][ ][ ][*][ ][ ]M1 \n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][*][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "L1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]A1 \n" +
            "\n" +
            "Scores:\n" +
            "Lime = 1, Aqua = 1, Orange = 2, Magenta = 2\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Lime = 99, Aqua = 99, Orange = 98, Magenta = 98\n\n"

        Menu.doMove // new feature (***** move played off an active tile *****)

        Menu.showGameArea should be(expectedResult4)
      }

      it("can DO MOVE when a player has no move possibilities") {
        Menu.initialize
        val expectedResult1 =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  - [ ] -  - [ ][ ] - [ ][ ][ ] - \n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  - [ ] -  -  -  - [ ][ ][ ]\n" +
            "[ ] -  -  -  -  - [ ] - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ] - [ ] - [ ][ ][ ][ ][ ][ ] - [ ][ ][ ][ ][ ][ ][ ] - \n" +
            " - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Aqua = 73, Orange = 74, Magenta = 74, Lime = 74\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Aqua = 27, Orange = 26, Magenta = 26, Lime = 26\n\n"
      
        for (i <- 1 to 73) Menu.doTurn
        Menu.doMove
        Menu.doMove
        Menu.doMove
        Menu.showGameArea should be(expectedResult1)

        // Now, the interesting part! Aqua doesn't have a move, so she'll be removed from the Player Order.  The three other players put tile down in any open cell.

        val expectedResult2 =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  - [ ] -  - [ ][ ] - [ ][ ][ ] - \n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  - [ ] -  -  -  - [ ][ ][ ]\n" +
            "[ ] -  -  -  -  - [ ] - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ] - [ ] - [ ][ ][ ][ ][ ][ ] - [ ][ ][ ][ ][ ][ ][ ] - \n" +
            " - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Orange = 74, Magenta = 74, Lime = 74\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 26, Magenta = 26, Lime = 26\n\n"

        Menu.doMove
        Menu.showGameArea should be(expectedResult2)

        val expectedResult3 =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - O75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  - [ ] -  - [ ][ ] - [ ][ ][ ] - \n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  - [ ] -  -  -  - [ ][ ][ ]\n" +
            "[ ] -  -  -  -  - [ ] - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ] - [ ] - [ ][ ][ ][ ][ ][ ] - [ ][ ][ ][ ][ ][ ][ ] - \n" +
            " - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Magenta = 74, Lime = 74, Orange = 75\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Magenta = 26, Lime = 26, Orange = 25\n\n"

        Menu.doMove
        Menu.showGameArea should be(expectedResult3)

        val expectedResult4 =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - O75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - M75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  - [ ] -  - [ ][ ] - [ ][ ][ ] - \n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  - [ ] -  -  -  - [ ][ ][ ]\n" +
            "[ ] -  -  -  -  - [ ] - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ] - [ ] - [ ][ ][ ][ ][ ][ ] - [ ][ ][ ][ ][ ][ ][ ] - \n" +
            " - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Lime = 74, Orange = 75, Magenta = 75\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Lime = 26, Orange = 25, Magenta = 25\n\n"

        Menu.doMove
        Menu.showGameArea should be(expectedResult4)

        val expectedResult5 =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - O75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - M75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - L75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  - [ ] -  - [ ][ ] - [ ][ ][ ] - \n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  - [ ] -  -  -  - [ ][ ][ ]\n" +
            "[ ] -  -  -  -  - [ ] - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ] - [ ] - [ ][ ][ ][ ][ ][ ] - [ ][ ][ ][ ][ ][ ][ ] - \n" +
            " - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Orange = 75, Magenta = 75, Lime = 75\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 25, Magenta = 25, Lime = 25\n\n"

        Menu.doMove
        Menu.showGameArea should be(expectedResult5)

        val expectedResult6 =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - M75\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [*]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][ ]\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ]\n" +
            " -  -  -  -  -  -  -  -  -  - [ ] -  - [ ][ ] - [ ][ ][ ] - \n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  - [ ] -  -  -  - [ ][ ][ ]\n" +
            "[ ] -  -  -  -  - [ ] - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ] - [ ] - [ ][ ][ ][ ][ ][ ] - [ ][ ][ ][ ][ ][ ][ ] - \n" +
            " - [ ][ ] - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Magenta = 75, Lime = 75, Orange = 76\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Magenta = 25, Lime = 25, Orange = 24\n\n"

        Menu.doMove
        Menu.showGameArea should be(expectedResult6)
      }

      //******* DO TURN *******
      it("can DO TURN to perform DO MOVE four times, unless game has been won") {
      
        Menu.initialize
        val expectedResult1 =
          "Board:\n" +
            "O1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]M1 \n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "L1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]A1 \n" +
            "\n" +
            "Scores:\n" +
            "Orange = 1, Magenta = 1, Lime = 1, Aqua = 1\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 99, Magenta = 99, Lime = 99, Aqua = 99\n\n"

        Menu.doTurn

        Menu.showGameArea should be(expectedResult1)

        val expectedResult_turn2 =
          "Board:\n" +
            " - [ ][ ] - [ ][ ] - [ ][ ] - [ ][ ]A2 [ ][ ][*][*][ ][ ]M1 \n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ][ ][*][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "[*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*]\n" +
            "[ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]\n" +
            "[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n" +
            "L1 [ ][ ][*][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][*][ ][ ]A1 \n" +
            "\n" +
            "Scores:\n" +
            "Orange = 2, Magenta = 2, Lime = 2, Aqua = 2\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Orange = 98, Magenta = 98, Lime = 98, Aqua = 98\n\n"

        Menu.doTurn
        Menu.showGameArea should be(expectedResult_turn2)

      }

      //******* DO GAME *******
      it("can DO GAME to perform DO TURN until game is won") {

        Menu.initialize
        val expectedResult =
          "Board:\n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ] - [ ]\n" +
            " - [ ] -  -  -  -  - [ ] -  -  -  -  -  -  -  -  -  -  -  - \n" +
            " -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - [ ][ ]\n" +
            "[ ][ ][ ][ ] - [ ] -  - [ ][ ] - [ ][ ] - [ ][ ] - [ ][ ][ ]\n" +
            " - [ ][ ][ ][ ][ ][ ][ ][*][ ][ ]<M>[ ][ ] - [ ][ ] - [ ] - \n" +
            "\n" +
            "Scores:\n" +
            "Magenta = 100, Lime = 99\n" +
            "Magenta Wins!\n" +
            "\n" +
            "Tiles In Hand:\n" +
            "Magenta = 0, Lime = 1\n\n"

        Menu.doGame

        Menu.showGameArea should be(expectedResult)
      }
    }
   }
}
